import pandas as pd
from datetime import datetime, timedelta
import os
import telebot
from telebot.apihelper import ApiTelegramException
import schedule
import time
import yfinance as yf  # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ yfinance

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "7651057081:AAE3IDL5Bj8GvfElCJCTWlZ5X_GXgGAWBm8"
TELEGRAM_CHAT_ID = "-1002372860219"
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
TICKERS = ["PEPE24478-USD", "FARTCOIN-USD", "DOGE-USD", "XRP-USD", "SOL-USD", "TRUMP-OFFICIAL-USD"]
TICKER_MAPPING = {
    "PEPE24478-USD": "1000PEPE-USDT",
    "FARTCOIN-USD": "FARTCOIN-USDT",
    "DOGE-USD": "DOGE-USDT",
    "XRP-USD": "XRP-USDT",
    "SOL-USD": "SOL-USDT",
    "TRUMP-OFFICIAL-USD": "TRUMP-USDT"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 429
def send_telegram_message(message):
    max_retries = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    retry_delay = 30  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

    for attempt in range(max_retries):
        try:
            bot.send_message(TELEGRAM_CHAT_ID, message, parse_mode='HTML')
            break  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except ApiTelegramException as e:
            if "Too Many Requests" in str(e):
                print(f"–û—à–∏–±–∫–∞ 429: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                time.sleep(retry_delay)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
                break
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def format_notification(sheet_name, time, value, ticker):
    ticker_name = TICKER_MAPPING.get(ticker, ticker)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞
    notifications = {
        "–ü–æ–∫—É–ø–∫–∞": f"üü¢ <b>–ü–æ–∫—É–ø–∫–∞</b>\n–¢–∏–∫–µ—Ä: <b>{ticker_name}</b>\n–í—Ä–µ–º—è: {time}\n–¶–µ–Ω–∞: {value:.2f}",
        "–ü—Ä–æ–¥–∞–∂–∞": f"üî¥ <b>–ü—Ä–æ–¥–∞–∂–∞</b>\n–¢–∏–∫–µ—Ä: <b>{ticker_name}</b>\n–í—Ä–µ–º—è: {time}\n–¶–µ–Ω–∞: {value:.2f}"
    }
    return notifications.get(sheet_name, "")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ EMA
def calculate_ema(data, period):
    try:
        return data['Close'].ewm(span=period, adjust=False).mean()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ EMA{period}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
def process_ticker(ticker):
    try:
        current_time = datetime.now().strftime("%H:%M:%S")
        print(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker} –≤ {current_time}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–∫–µ—Ä—É
        data = yf.download(ticker, period="30d", interval="5m")
        
        if data.empty:
            print(f"–î–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–∫–µ—Ä—É {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ –¥–∞–Ω–Ω—ã—Ö
        data.index = data.index.tz_localize(None)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data.columns = data.columns.droplevel(1)
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        filtered_data = data[(data.index >= start_date) & (data.index <= end_date)].copy()

        required_columns = ['Open', 'High', 'Low', 'Close', 'Volume']
        filtered_data.dropna(subset=required_columns, inplace=True)

        # –†–∞—Å—á–µ—Ç EMA
        ema7 = calculate_ema(filtered_data, 7)
        ema14 = calculate_ema(filtered_data, 14)
        
        if ema7 is not None and ema14 is not None:
            filtered_data['EMA7'] = ema7
            filtered_data['EMA14'] = ema14
            filtered_data['Difference'] = filtered_data['EMA14'] - filtered_data['EMA7']

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
        output_file = f"{ticker}.xlsx"
        if os.path.exists(output_file):
            existing_data = pd.read_excel(output_file, sheet_name='Data', index_col=0)
            existing_attention = pd.read_excel(output_file, sheet_name='–í–Ω–∏–º–∞–Ω–∏–µ')
            existing_cancel = pd.read_excel(output_file, sheet_name='–û—Ç–º–µ–Ω–∞')
            existing_buy = pd.read_excel(output_file, sheet_name='–ü–æ–∫—É–ø–∫–∞')
            existing_sell = pd.read_excel(output_file, sheet_name='–ü—Ä–æ–¥–∞–∂–∞')
        else:
            existing_data = pd.DataFrame()
            existing_attention = pd.DataFrame(columns=['–í—Ä–µ–º—è', 'Difference'])
            existing_cancel = pd.DataFrame(columns=['–í—Ä–µ–º—è', 'Difference'])
            existing_buy = pd.DataFrame(columns=['–í—Ä–µ–º—è', 'Open'])
            existing_sell = pd.DataFrame(columns=['–í—Ä–µ–º—è', 'Open'])

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        new_data = filtered_data[~filtered_data.index.isin(existing_data.index)]
        new_rows_count = len(new_data)
        updated_data = pd.concat([existing_data, new_data])
        columns_to_keep = ['Open', 'High', 'Low', 'Close', 'Volume', 'EMA7', 'EMA14', 'Difference']
        updated_data = updated_data[columns_to_keep]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        attention_data = existing_attention.copy()
        cancel_data = existing_cancel.copy()
        buy_data = existing_buy.copy()
        sell_data = existing_sell.copy()

        new_attention_rows = 0
        new_cancel_rows = 0
        new_buy_rows = 0
        new_sell_rows = 0
        analyzing_sale = False

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC+5
        current_time_utc5 = datetime.now() + timedelta(hours=5)

        for i in range(1, len(updated_data)):
            current_diff = updated_data.iloc[i, 7]
            prev_diff = updated_data.iloc[i - 1, 7]
            current_ema7 = updated_data.iloc[i, 5]
            prev_ema7 = updated_data.iloc[i - 1, 5]

            time_with_offset = updated_data.index[i] + timedelta(hours=5)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (UTC+5)
            if time_with_offset <= current_time_utc5:
                continue

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ª–∏—Å—Ç–∞ "–í–Ω–∏–º–∞–Ω–∏–µ" (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram)
            if 0 <= current_diff <= 0.20 and current_diff < prev_diff:
                if not attention_data['–í—Ä–µ–º—è'].eq(time_with_offset).any():
                    new_row = pd.DataFrame({'–í—Ä–µ–º—è': [time_with_offset], 'Difference': [current_diff]})
                    attention_data = pd.concat([attention_data, new_row], ignore_index=True)
                    new_attention_rows += 1

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ª–∏—Å—Ç–∞ "–û—Ç–º–µ–Ω–∞" (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram)
            if current_diff > 0.20 and 0 <= prev_diff <= 0.20:
                if not cancel_data['–í—Ä–µ–º—è'].eq(time_with_offset).any():
                    new_row = pd.DataFrame({'–í—Ä–µ–º—è': [time_with_offset], 'Difference': [round(current_diff, 2)]})
                    cancel_data = pd.concat([cancel_data, new_row], ignore_index=True)
                    new_cancel_rows += 1

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ª–∏—Å—Ç–∞ "–ü–æ–∫—É–ø–∫–∞" (—Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram)
            if current_diff < 0 and prev_diff > 0:
                if not buy_data['–í—Ä–µ–º—è'].eq(time_with_offset).any():
                    current_price = updated_data.iloc[i, 0]
                    new_row = pd.DataFrame({'–í—Ä–µ–º—è': [time_with_offset], 'Open': [current_price]})
                    buy_data = pd.concat([buy_data, new_row], ignore_index=True)
                    new_buy_rows += 1
                    send_telegram_message(format_notification("–ü–æ–∫—É–ø–∫–∞", time_with_offset, current_price, ticker))
                    time.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ª–∏—Å—Ç–∞ "–ü—Ä–æ–¥–∞–∂–∞" (—Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Telegram)
            if current_diff < 0 and prev_diff >= 0:
                analyzing_sale = True
            
            if analyzing_sale and current_ema7 < prev_ema7:
                if not sell_data['–í—Ä–µ–º—è'].eq(time_with_offset).any():
                    current_price = updated_data.iloc[i, 0]
                    new_row = pd.DataFrame({'–í—Ä–µ–º—è': [time_with_offset], 'Open': [current_price]})
                    sell_data = pd.concat([sell_data, new_row], ignore_index=True)
                    new_sell_rows += 1
                    send_telegram_message(format_notification("–ü—Ä–æ–¥–∞–∂–∞", time_with_offset, current_price, ticker))
                    time.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                analyzing_sale = False

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
        with pd.ExcelWriter(output_file, engine='xlsxwriter') as writer:
            updated_data.to_excel(writer, sheet_name='Data', index=True)
            attention_data.to_excel(writer, sheet_name='–í–Ω–∏–º–∞–Ω–∏–µ', index=False)
            cancel_data.to_excel(writer, sheet_name='–û—Ç–º–µ–Ω–∞', index=False)
            buy_data.to_excel(writer, sheet_name='–ü–æ–∫—É–ø–∫–∞', index=False)
            sell_data.to_excel(writer, sheet_name='–ü—Ä–æ–¥–∞–∂–∞', index=False)
            
            workbook = writer.book
            worksheet_data = writer.sheets['Data']
            number_format = workbook.add_format({'num_format': '0.00'})
            worksheet_data.set_column('A:I', None, number_format)
            
            light_green_format = workbook.add_format({'bg_color': '#C6EFCE'})
            worksheet_data.conditional_format(
                f'I2:I{len(updated_data) + 1}',
                {
                    'type': 'cell',
                    'criteria': '<',
                    'value': 0,
                    'format': light_green_format
                }
            )

            worksheet_data.set_column('A:A', 19)
            worksheet_data.set_column('B:E', 8)
            worksheet_data.set_column('F:F', 13)
            worksheet_data.set_column('G:H', 8)
            worksheet_data.set_column('I:I', 10)

            for sheet_name in ['–í–Ω–∏–º–∞–Ω–∏–µ', '–û—Ç–º–µ–Ω–∞', '–ü–æ–∫—É–ø–∫–∞', '–ü—Ä–æ–¥–∞–∂–∞']:
                worksheet = writer.sheets[sheet_name]
                worksheet.set_column('A:A', 20)
                worksheet.set_column('B:B', 12, number_format)

        print(f"–§–∞–π–ª Excel –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(updated_data)}")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {new_rows_count}")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –í–Ω–∏–º–∞–Ω–∏–µ: {new_attention_rows}")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –û—Ç–º–µ–Ω–∞: {new_cancel_rows}")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –ü–æ–∫—É–ø–∫–∞: {new_buy_rows}")
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –ü—Ä–æ–¥–∞–∂–∞: {new_sell_rows}")

    except Exception as e:
        print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–∫–µ—Ä–∞ {ticker}: {e}")
        send_telegram_message(f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–∫–µ—Ä–∞ {ticker}:</b>\n{str(e)}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
def main():
    for ticker in TICKERS:
        process_ticker(ticker)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
def schedule_bot():
    # –£–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∑–∞–¥–∞—á—É
    minutes_to_run = [2, 3, 7, 8, 12, 13, 17, 18, 22, 23, 27, 28, 32, 33, 37, 38, 42, 43, 47, 48, 52, 53, 57, 58]

    for minute in minutes_to_run:
        schedule.every().hour.at(f":{minute:02d}").do(main)
    
    send_telegram_message("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    while True:
        try:
            schedule.run_pending()
            time.sleep(1)
        except Exception as e:
            error_message = f"‚ö†Ô∏è <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞:</b>\n{str(e)}"
            send_telegram_message(error_message)
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(300)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    schedule_bot()
