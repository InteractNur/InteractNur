import os
from pybit.unified_trading import HTTP  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è API Bybit v5
from telethon import TelegramClient, events

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bybit (–¥–µ–º–æ-—Å—á–µ—Ç)
BYBIT_API_KEY = "BHR3JjbL2fhSFrZVvH"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á –¥–ª—è –¥–µ–º–æ-—Å—á–µ—Ç–∞
BYBIT_API_SECRET = "QIO0CNq0GFpMSyGEcbuSn7UGJABNcrONenOm"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-—Å–µ–∫—Ä–µ—Ç –¥–ª—è –¥–µ–º–æ-—Å—á–µ—Ç–∞
BYBIT_ENDPOINT = "https://api-testnet.bybit.com"  # –î–µ–º–æ-—Å–µ—Ç—å Bybit

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
TELEGRAM_API_ID = "23201449"  # –í–∞—à API ID (–ø–æ–ª—É—á–µ–Ω –Ω–∞ my.telegram.org)
TELEGRAM_API_HASH = "369f147ddb6470ed944a416f1edc91e1"  # –í–∞—à API Hash (–ø–æ–ª—É—á–µ–Ω –Ω–∞ my.telegram.org)
TELEGRAM_CHANNEL_ID = "-1002372860219"  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–≤ USDT)
FIXED_AMOUNT = 40  # 10 –¥–æ–ª–ª–∞—Ä–æ–≤
COMMISSION_RATE = 0.002  # –ö–æ–º–∏—Å—Å–∏—è 0.2%

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ Bybit –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
session = HTTP(
    testnet=True,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å
    api_key=BYBIT_API_KEY,
    api_secret=BYBIT_API_SECRET
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞
def get_current_price(symbol: str):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ä–µ
        ticker = session.get_tickers(
            category="linear",  # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –ø–∞—Ä
            symbol=symbol
        )
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
        return float(ticker['result']['list'][0]['lastPrice'])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä—É
def get_open_position(symbol: str):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        positions = session.get_positions(
            category="linear",
            symbol=symbol
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        for position in positions['result']['list']:
            if float(position['size']) > 0:
                return float(position['size'])
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bybit
def place_order(symbol: str, side: str, qty: float):
    try:
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –¥–ª—è –ª–∏–Ω–µ–π–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        order = session.place_order(
            category="linear",  # –§—å—é—á–µ—Ä—Å–Ω—ã–µ –ø–∞—Ä—ã
            symbol=symbol,
            side=side,  # "Buy" –∏–ª–∏ "Sell"
            orderType="Market",  # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
            qty=str(qty),  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            timeInForce="GoodTillCancel"
        )
        return order
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
def calculate_qty_with_commission(amount: float, price: float):
    # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é 0.2% (0.002)
    return amount / (price * (1 + COMMISSION_RATE))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def parse_signal(message: str):
    try:
        # –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:
        # üü¢ <b>–ü–æ–∫—É–ø–∫–∞</b>\n–¢–∏–∫–µ—Ä: <b>BTCUSDT</b>\n–í—Ä–µ–º—è: 12:00\n–¶–µ–Ω–∞: 50000.00
        lines = message.split("\n")
        action = lines[0].strip()  # üü¢ <b>–ü–æ–∫—É–ø–∫–∞</b> –∏–ª–∏ üî¥ <b>–ü—Ä–æ–¥–∞–∂–∞</b>
        ticker = lines[1].split(":")[1].strip().replace("<b>", "").replace("</b>", "")  # BTCUSDT

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)
        if "–ü–æ–∫—É–ø–∫–∞" in action:
            side = "Buy"
        elif "–ü—Ä–æ–¥–∞–∂–∞" in action:
            side = "Sell"
        else:
            return None

        return {
            "ticker": ticker,
            "side": side
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('bybit_bot', TELEGRAM_API_ID, TELEGRAM_API_HASH)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
@client.on(events.NewMessage(chats=TELEGRAM_CHANNEL_ID))
async def handler(event):
    message = event.message.message  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

    # –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª
    signal = parse_signal(message)
    if signal:
        print(f"–°–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω: {signal}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞
        ticker = signal["ticker"]
        current_price = get_current_price(ticker)
        if not current_price:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É.")
            return

        if signal["side"] == "Buy":
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
            qty = calculate_qty_with_commission(FIXED_AMOUNT, current_price)
            print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty}")

            # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É
            result = place_order(ticker, "Buy", qty=qty)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {result}")

        elif signal["side"] == "Sell":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ä—É
            open_position_qty = get_open_position(ticker)
            if open_position_qty:
                # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏)
                result = place_order(ticker, "Sell", qty=open_position_qty)
                print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result}")
            else:
                print(f"–ü–æ–∑–∏—Ü–∏—è –ø–æ —Ç–∏–∫–µ—Ä—É {ticker} –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞. –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø—Ä–æ–ø—É—â–µ–Ω.")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–∏–≥–Ω–∞–ª –∏–ª–∏ —ç—Ç–æ –Ω–µ —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    with client:
        client.run_until_disconnected()
